hpts <- chull(x = T1$t1, y = T1$t2)
hpts <- c(hpts, hpts[1])
xy.coords <- cbind(T1$t1, T1$t2)
chull.coords <- xy.coords[hpts,]
chull.poly <- Polygon(chull.coords, hole=F)
maxFRic <- chull.poly@area
FRic1 <- c()
for(i in 2:nsp){
Ti <- T1[1:i, ]
hpts <- chull(x = Ti$t1, y = Ti$t2)
hpts <- c(hpts, hpts[1])
xy.coords <- cbind(Ti$t1, Ti$t2)
chull.coords <- xy.coords[hpts,]
chull.poly <- Polygon(chull.coords, hole=F)
FRic1[1] <- 0
FRic1[i] <- chull.poly@area/maxFRic
}
plot(S, FRic1)
data <- data.frame(S,FRic1)
m1 <- nls(FRic1 ~ a*S/(1 + b*S), data = data,
start = list(a = 0.1, b = 0.1))
summary(m1)
T1 <- data.frame(t1 = 1:nsp, t2 = 1:nsp + rnorm(nsp))
rownames(T1) <- paste0("sp", 1:nsp)
hpts <- chull(x = T1$t1, y = T1$t2)
hpts <- c(hpts, hpts[1])
xy.coords <- cbind(T1$t1, T1$t2)
chull.coords <- xy.coords[hpts,]
chull.poly <- Polygon(chull.coords, hole=F)
maxFRic <- chull.poly@area
FRic1 <- c()
for(i in 2:nsp){
Ti <- T1[1:i, ]
hpts <- chull(x = Ti$t1, y = Ti$t2)
hpts <- c(hpts, hpts[1])
xy.coords <- cbind(Ti$t1, Ti$t2)
chull.coords <- xy.coords[hpts,]
chull.poly <- Polygon(chull.coords, hole=F)
FRic1[1] <- 0
FRic1[i] <- chull.poly@area/maxFRic
}
plot(S, FRic1)
data <- data.frame(S,FRic1)
m1 <- nls(FRic1 ~ a*S/(1 + b*S), data = data,
start = list(a = 0.1, b = 0.1))
summary(m1)
m1 <- nls(FRic1 ~ a*S/(1 - b*S), data = data,
start = list(a = 0.1, b = 0.1))
summary(m1)
m1 <- nls(FRic1 ~ a*S/(1 + b*S), data = data,
start = list(a = 0.1, b = 0.1))
summary(m1)
ggplot(data=data, aes(x = S, y = FRic1)) +
theme_bw() +
xlab("Species richness") +
ylab("Functional richness") +  geom_point(aes(size = 2), col = "gray70") +
geom_line(data = mm1, aes(x = S, y = FRic1), colour = "blue", size=2)
FRic1 <- seq(1:100, length = 43) + rnorm(43)
FRic1 <- seq(1, 100, length = 43) + rnorm(43)
plot(S, FRic1)
FRic1 <- seq(1, 200, length = 43) + rnorm(43)
plot(S, FRic1)
FRic1 <- seq(1, 100, length = 43) + rnorm(43)
plot(S, FRic1)
FRic1 <- seq(1, 100, length = 43) + abs(rnorm(43))
plot(S, FRic1)
FRic1 <- seq(1, 100, length = 43) + abs(rnorm(43,sd=4))
plot(S, FRic1)
FRic1 <- c()
for(i in 2:nsp){
FRic1[1] <- 0
FRic1[i] <- FRic1[i-1] + abs(rnorm(1))
}
plot(S, FRic1)
FRic1 <- c()
for(i in 2:nsp){
FRic1[1] <- 0
FRic1[i] <- FRic1[i-1] + abs(rnorm(1,sd=2))
}
plot(S, FRic1)
FRic1 <- FRic1/max(FRic1)
data <- data.frame(S,FRic1)
m1 <- nls(FRic1 ~ a*S/(1 + b*S), data = data,
start = list(a = 0.1, b = 0.1))
summary(m1)
FRic1 <- c()
for(i in 2:nsp){
FRic1[1] <- 0
S <- seq(2,0.1,length=43)
FRic1[i] <- FRic1[i-1] + abs(rnorm(1,sd=S[i]))
}
plot(S, FRic1)
seq(2,0.1,length=43)
FRic
FRic1
abs(rnorm(1,sd=S[1]))
0.77 + abs(rnorm(1,sd=S[2]))
FRic1 <- c()
for(i in 2:nsp){
FRic1[1] <- 0
S <- seq(2,0.1,length=43)
FRic1[i] <- FRic1[i-1] + abs(rnorm(1,sd=S[i]))
}
plot(S, FRic1)
FRic1 <- c()
for(i in 2:nsp){
FRic1[1] <- 0
SD <- seq(2,0.1,length=43)
FRic1[i] <- FRic1[i-1] + abs(rnorm(1,sd=SD[i]))
}
S<-1:43
plot(S, FRic1)
FRic1 <- c()
for(i in 2:nsp){
FRic1[1] <- 0
SD <- seq(2,0.5,length=43)
FRic1[i] <- FRic1[i-1] + abs(rnorm(1,sd=SD[i]))
}
plot(S, FRic1)
FRic1 <- c()
for(i in 2:nsp){
FRic1[1] <- 0
SD <- seq(2,0.8,length=43)
FRic1[i] <- FRic1[i-1] + abs(rnorm(1,sd=SD[i]))
}
plot(S, FRic1)
for(i in 2:nsp){
FRic1[1] <- 0
SD <- seq(2,1,length=43)
FRic1[i] <- FRic1[i-1] + abs(rnorm(1,sd=SD[i]))
}
plot(S, FRic1)
FRic1 <- FRic1/max(FRic1)
data <- data.frame(S,FRic1)
m1 <- nls(FRic1 ~ a*S/(1 + b*S), data = data,
start = list(a = 0.1, b = 0.1))
summary(m1)
mm1 <- data.frame(S = seq(0, max(data$S), length.out = 500))
mm1$FRic1 <- predict(m1, newdata = mm1)
ggplot(data=data, aes(x = S, y = FRic1)) +
theme_bw() +
xlab("Species richness") +
ylab("Functional richness") +  geom_point(aes(size = 2), col = "gray70") +
geom_line(data = mm1, aes(x = S, y = FRic1), colour = "blue", size=2)
FDvar <- c()
for(i in 2:nsp){
FDvar[1] <- 0
FDvar[i] <- sd(FRic[1:i])
}
FDvar <- c()
for(i in 2:nsp){
FDvar[1] <- 0
FDvar[i] <- sd(FRic1[1:i])
}
plot(S, FDvar)
FDvar <- c()
for(i in 2:nsp){
FDsd[1] <- 0
FDsd[i] <- sd(FRic1[1:i])
}
FDsd <- c()
for(i in 2:nsp){
FDsd[1] <- 0
FDsd[i] <- sd(FRic1[1:i])
}
plot(S, FDvar)
plot(S, FDsd)
data <- read.csv("C:/RD/bird_functional_traits.csv")
nsp <- nrow(data)
S <- 1:nsp
hpts <- chull(data[,c(2,6)])
hpts <- c(hpts, hpts[1])
xy.coords <- data[,c(2,6)]
chull.coords <- xy.coords[hpts,]
chull.poly <- Polygon(chull.coords, hole=F)
maxFRic <- chull.poly@area
FRic1 <- c()
for(i in 2:nsp){
Ti <- data[1:i, ]
hpts <- chull(x = Ti$body.mass, y = Ti$seeds)
hpts <- c(hpts, hpts[1])
xy.coords <- cbind(Ti$body.mass, Ti$seeds)
chull.coords <- xy.coords[hpts,]
chull.poly <- Polygon(chull.coords, hole=F)
FRic1[1] <- 0
FRic1[i] <- chull.poly@area/maxFRic
}
plot(S, FRic1)
FDsd <- c()
for(i in 2:nsp){
FDsd[1] <- 0
FDsd[i] <- sd(FRic1[1:i])
}
plot(S, FDsd)
FRic2 <- c()
for(i in 2:nsp){
Ti <- T2[1:i, ]
hpts <- chull(x = Ti$t1, y = Ti$t2)
hpts <- c(hpts, hpts[1])
xy.coords <- cbind(Ti$t1, Ti$t2)
chull.coords <- xy.coords[hpts,]
chull.poly <- Polygon(chull.coords, hole=F)
FRic2[1] <- 0
FRic2[i] <- chull.poly@area/maxFRic
}
plot(S, FRic2)
FDsd <- c()
for(i in 2:nsp){
FDsd[1] <- 0
FDsd[i] <- sd(FRic2[1:i])
}
plot(S, FDsd)
# Suppress messages, warnings and errors for document aesthetics.
knitr::opts_chunk$set(message = FALSE, warning = FALSE, error = FALSE, echo = TRUE)
CWmetrics <- function(comm, traits, species, S = 0){
# Trait matrix at the species level (mean field approach)
df_traits <- do.call("rbind", traits)
df_traits$species <- as.factor(df_traits$species)
meanT <- df_traits %>% group_by(species) %>%
summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE))) %>%
as.data.frame()
sdT <- df_traits %>% group_by(species) %>%
summarise(across(where(is.numeric), ~ sd(.x, na.rm = TRUE))) %>%
as.data.frame()
t <- as.matrix(meanT[, -1]) # trait means
S <- as.matrix(sdT[, -1]) # trait standard deviations
S <- apply(S, 2, function(x) x/max(x)) # standardization
# Community-weighted metrics
R <- as.matrix(comm/rowSums(comm))  # Species relative abundances
# Community-weighted mean
CWM <- R %*% t
colnames(CWM) <- paste0("CWM", 1:ncol(t))
# Community-weighted variance
CWV <- (R %*% t^2) - CWM^2
colnames(CWV) <- paste0("CWV", 1:ncol(t))
# Community-weighted intraspecific variance
CWIV <- (R %*% (t^2 + S^2)) - CWM^2
colnames(CWIV) <- paste0("CWIV", 1:ncol(t))
CW <- data.frame(CWM, CWV, CWIV)
CW
}
kable(CWmetrics(comm = C, traits = trait_matrix, species = sp), digits = 2)
# Load packages
library(MASS) # Simulating multivariate normal and Wishart distributions
library(ggplot2) # Plotting
library(dplyr) # Data handling
library(tidyr) # Data handling
library(knitr) # Improved layout
library(mobsim) # Simulating community matrices
library(lme4) # Linear mixed models
library(boot) # Bootstrap confidence intervals
library(cati) # T-statistics and Rao's entropy decomposition
library(sp)
# ITV example
data <- na.omit(read.table("C:/RD/EB_functional_trait_space.txt", head = T))
data <- data[-79,]
meanT <- data %>% group_by(plant_species) %>% summarise(xheight = mean(log(plant_height)),
xcrop = mean(log(fruit_crop)))
library(dplyr)
library(ggplot2)
data <- na.omit(read.table("C:/RD/EB_functional_trait_space.txt", head = T))
data <- data[-79,]
meanT <- data %>% group_by(plant_species) %>% summarise(xheight = mean(log(plant_height)),
xcrop = mean(log(fruit_crop)))
ggplot(data=data, aes(x = log(plant_height), y = log(fruit_crop), col = plant_species)) +
geom_point(size = 3) +
geom_point(data = meanT, aes(x=xheight, y=xcrop, size = 4),shape = 23, size = 4, fill="black") +
theme_bw() + xlab("log(Plant height) (m)") + ylab("log(Fruit production)") +
stat_ellipse(geom="polygon", alpha = 0.2, show.legend = FALSE, level = 0.95)
head(data)
str(data)
table(data$plant_species)
ggplot(data=data, aes(x = log(plant_height), y = log(fruit_crop), col = plant_species)) +
geom_point(size = 3) +
geom_point(data = meanT, aes(x=xheight, y=xcrop),shape = 23, size = 4, alpha = 0.2, fill="black") +
theme_bw() + xlab("log(Plant height) (m)") + ylab("log(Fruit production)") +
stat_ellipse(geom="polygon", alpha = 0.2, show.legend = FALSE, level = 0.95)
ggplot(data=data, aes(x = log(plant_height), y = log(fruit_crop), col = plant_species)) +
geom_point(size = 3) +
geom_point(data = meanT, aes(x=xheight, y=xcrop),shape = 23, size = 4, alpha = 0.6, fill="black") +
theme_bw() + xlab("log(Plant height) (m)") + ylab("log(Fruit production)") +
stat_ellipse(geom="polygon", alpha = 0.2, show.legend = FALSE, level = 0.95)
ggplot(data=data, aes(x = log(plant_height), y = log(fruit_crop), col = plant_species)) +
geom_point(size = 3, alpha = 0.6) +
geom_point(data = meanT, aes(x=xheight, y=xcrop),shape = 23, size = 4, fill="black") +
theme_bw() + xlab("log(Plant height) (m)") + ylab("log(Fruit production)") +
stat_ellipse(geom="polygon", alpha = 0.2, show.legend = FALSE, level = 0.95)
# Volumen reducido (elipses)
library(car)
cellip_intra <- confidenceEllipse(lm(log_c ~ log_h, data=data), Scheffe=TRUE)
data$log_h <- log(data$plant_height)
data$log_c <- log(data$fruit_crop)
cellip_intra <- confidenceEllipse(lm(log_c ~ log_h, data=data), Scheffe=TRUE)
?confidenceElllipse
head(data)
# ITV example
data <- na.omit(read.table("C:/RD/EB_functional_trait_space.txt", head = T))
data <- data[-79,]
meanT <- data %>% group_by(plant_species) %>% summarise(xheight = mean(log(plant_height)),
xcrop = mean(log(fruit_crop)))
ggplot(data=data, aes(x = log(plant_height), y = log(fruit_crop), col = plant_species)) +
geom_point(size = 3, alpha = 0.6) +
geom_point(data = meanT, aes(x=xheight, y=xcrop),shape = 23, size = 4, fill="black") +
theme_bw() + xlab("log(Plant height) (m)") + ylab("log(Fruit production)") +
stat_ellipse(geom="polygon", alpha = 0.2, show.legend = FALSE, level = 0.95)
ggplot(data=data, aes(x = log(plant_height), y = log(fruit_crop), col = plant_species)) +
geom_point(size = 3, alpha = 0.6) + ylim(-1,10) +
geom_point(data = meanT, aes(x=xheight, y=xcrop),shape = 23, size = 4, fill="black") +
theme_bw() + xlab("log(Plant height) (m)") + ylab("log(Fruit production)") +
stat_ellipse(geom="polygon", alpha = 0.2, show.legend = FALSE, level = 0.95)
table(data$plant_species)
meanT
# ITV example
data <- na.omit(read.table("C:/RD/EB_functional_trait_space.txt", head = T))
meanT <- data %>% group_by(plant_species) %>%
summarise(xheight = mean(log(plant_height),na.rm=T),
xcrop = mean(log(fruit_crop), na.rm=T))
ggplot(data=data, aes(x = log(plant_height), y = log(fruit_crop), col = plant_species)) +
geom_point(size = 3, alpha = 0.6) + ylim(-1,10) +
geom_point(data = meanT, aes(x=xheight, y=xcrop),shape = 23, size = 4, fill="black") +
theme_bw() + xlab("log(Plant height) (m)") + ylab("log(Fruit production)") +
stat_ellipse(geom="polygon", alpha = 0.2, show.legend = FALSE, level = 0.95)
meanT
head(data)
View(data)
ggplot(data=data, aes(x = log(plant_height), y = log(fruit_crop)+1, col = plant_species)) +
geom_point(size = 3, alpha = 0.6) + ylim(-1,10) +
geom_point(data = meanT, aes(x=xheight, y=xcrop),shape = 23, size = 4, fill="black") +
theme_bw() + xlab("log(Plant height) (m)") + ylab("log(Fruit production)") +
stat_ellipse(geom="polygon", alpha = 0.2, show.legend = FALSE, level = 0.95)
meanT <- data %>% group_by(plant_species) %>%
summarise(xheight = mean(log(plant_height)),
xcrop = mean(log(fruit_crop)+1))
ggplot(data=data, aes(x = log(plant_height), y = log(fruit_crop)+1, col = plant_species)) +
geom_point(size = 3, alpha = 0.6) + ylim(-1,10) +
geom_point(data = meanT, aes(x=xheight, y=xcrop),shape = 23, size = 4, fill="black") +
theme_bw() + xlab("log(Plant height) (m)") + ylab("log(Fruit production)") +
stat_ellipse(geom="polygon", alpha = 0.2, show.legend = FALSE, level = 0.95)
meanT
meanT <- data %>% group_by(plant_species) %>%
summarise(xheight = mean(log(plant_height)),
xcrop = mean(log(fruit_crop+1)))
ggplot(data=data, aes(x = log(plant_height), y = log(fruit_crop+1), col = plant_species)) +
geom_point(size = 3, alpha = 0.6) +
geom_point(data = meanT, aes(x=xheight, y=xcrop),shape = 23, size = 4, fill="black") +
theme_bw() + xlab("log(Plant height) (m)") + ylab("log(Fruit production)") +
stat_ellipse(geom="polygon", alpha = 0.2, show.legend = FALSE, level = 0.95)
data$log_h <- log(data$plant_height)
data$log_c <- log(data$fruit_crop+1)
hpts <- chull(x = data$log_h, y = data$log_c)
hpts <- c(hpts, hpts[1])
xy.coords <- cbind(data$log_h, data$log_c)
chull.coords <- xy.coords[hpts,]
chull.poly <- Polygon(chull.coords, hole=F)
Aintra <- chull.poly@area
hpts <- chull(x = meanT$xheight, y = meanT$xcrop)
hpts <- c(hpts, hpts[1])
xy.coords <- cbind(meanT$xheight, meanT$xcrop)
chull.coords <- xy.coords[hpts,]
chull.poly <- Polygon(chull.coords, hole=F)
A <- chull.poly@area
# Volumen reducido (convex hull)
100*(Aintra - A)/Aintra
ggplot(data=data, aes(x = log(plant_height), y = log(fruit_crop+1), col = plant_species)) +
geom_point(size = 3, alpha = 0.6) +
geom_point(data = meanT, aes(x=xheight, y=xcrop),shape = 23, size = 4, fill="black") +
theme_bw() + xlab("log(Plant height) (m)") + ylab("log(Fruit production)") +
stat_ellipse(geom="polygon", alpha = 0.2, show.legend = FALSE, level = 0.95) +
theme(legend.position="none")
?confidenceEllipse
confidenceEllipse
dataEllipse(data$log_h, data$log_c, levels=0.95)
me <- apply(cbind(data$log_h, data$log_c), 2, mean)
v <- var(cbind(data$log_h, data$log_c))
dat <- cbind(data$log_h, data$log_c)
dat <- cbind(data$log_h, data$log_c)
me <- apply(dat, 2, mean)
v <- var(dat))
v <- var(dat)
rad <- sqrt(2*qf(0.95, 2, nrow(dat)-1))
z <- ellipse(me, v, rad, segments=1001)
z
dist2center <- sqrt(rowSums((t(t(z)-me))^2))
pi*min(dist2center)*max(dist2center)
Aintra <- pi*min(dist2center)*max(dist2center)
meanT
dat <- cbind(meanT$xheight, meanT$xcrop)
me <- apply(dat, 2, mean)
v <- var(dat)
rad <- sqrt(2*qf(0.95, 2, nrow(dat)-1))
z <- ellipse(me, v, rad, segments=1001)
dist2center <- sqrt(rowSums((t(t(z)-me))^2))
A <- pi*min(dist2center)*max(dist2center)
100*(Aintra - A)/Aintra
Aintra
A
dat <- cbind(data$log_h, data$log_c)
me <- apply(dat, 2, mean)
v <- var(dat)
rad <- sqrt(2*qf(0.95, 2, nrow(dat)-1))
z <- ellipse(me, v, rad, segments=1001)
dist2center <- sqrt(rowSums((t(t(z)-me))^2))
Aintra <- pi*min(dist2center)*max(dist2center)
Aintra
dataEllipse(data$log_h, data$log_c, levels=0.95)
dataEllipse(meanT$xheight, meanT$xcrop, levels=0.95)
dat <- cbind(meanT$xheight, meanT$xcrop)
me <- apply(dat, 2, mean)
v <- var(dat)
rad <- sqrt(2*qf(0.95, 2, nrow(dat)-1))
z <- ellipse(me, v, rad, segments=1001)
dist2center <- sqrt(rowSums((t(t(z)-me))^2))
A <- pi*min(dist2center)*max(dist2center)
A
cov_dat <- cov(dat) # covariance matrix
eig_dat <- eigen(cov(dat))$values #eigenvalues of covariance matrix
vec <- sqrt(5.991* eig_dat) # half the length of major and minor axis for the 95% confidence ellipse
pi*vec[1]*vec[2]
dat <- cbind(data$log_h, data$log_c)
me <- apply(dat, 2, mean)
v <- var(dat)
rad <- sqrt(2*qf(0.95, 2, nrow(dat)-1))
z <- ellipse(me, v, rad, segments=1001)
dist2center <- sqrt(rowSums((t(t(z)-me))^2))
Aintra <- pi*min(dist2center)*max(dist2center)
cov_dat <- cov(dat) # covariance matrix
eig_dat <- eigen(cov(dat))$values #eigenvalues of covariance matrix
vec <- sqrt(5.991* eig_dat) # half the length of major and minor axis for the 95% confidence ellipse
pi*vec[1]*vec[2]
eig_dat
# Volumen reducido (elipses)
dat <- cbind(data$log_h, data$log_c)
cov_dat <- cov(dat) # covariance matrix
eig_dat <- eigen(cov(dat))$values #eigenvalues of covariance matrix
vec <- sqrt(5.991* eig_dat) # half the length of major and minor axis for the 95% confidence ellipse
Aintra <- pi*vec[1]*vec[2]
dat <- cbind(meanT$xheight, meanT$xcrop)
cov_dat <- cov(dat) # covariance matrix
eig_dat <- eigen(cov(dat))$values #eigenvalues of covariance matrix
vec <- sqrt(5.991* eig_dat) # half the length of major and minor axis for the 95% confidence ellipse
A <- pi*vec[1]*vec[2]
100*(Aintra - A)/Aintra
# Volumen reducido (elipses)
dat <- cbind(data$log_h, data$log_c)
cov_dat <- cov(dat) # covariance matrix
eig_dat <- eigen(cov(dat))$values #eigenvalues of covariance matrix
vec <- 2*sqrt(5.991* eig_dat) # half the length of major and minor axis for the 95% confidence ellipse
Aintra <- pi*vec[1]*vec[2]
dat <- cbind(meanT$xheight, meanT$xcrop)
cov_dat <- cov(dat) # covariance matrix
eig_dat <- eigen(cov(dat))$values #eigenvalues of covariance matrix
vec <- 2*sqrt(5.991* eig_dat) # half the length of major and minor axis for the 95% confidence ellipse
A <- pi*vec[1]*vec[2]
100*(Aintra - A)/Aintra
# Suppress messages, warnings and errors for document aesthetics.
knitr::opts_chunk$set(message = FALSE, warning = FALSE, error = FALSE, echo = TRUE)
# Load required libraries.
library(lme4) # Fitting generalized linear mixed models
library(lmerTest) # P-values for GLMMs
library(MuMIn) # Computing R2
library(MVN) # Assessing multivariate normality
library(car) # Computing variance inflation factors
library(boot) # Bootstrapping
library(ggplot2) # Plotting
library(ggdist) # Plotting
library(dplyr) # Managing data
library(reshape2) # Managing data
library(relaimpo) # Assessing relative importance of predictors
library(mgcv) # Fitting generalized additive models
data <- read.table("C:/RD/Passiflora_selection_analysis.txt", header = TRUE)
lp <- subset(data, idpopulation == "La_Plata")
data <- lp
# Fitness component: number of fruits pecked
data$W1 <- data$fruits.removed
data$wrel1 <- data$W1/mean(data$W1)
# Fitness component 2: mean number of seeds removed
data$W2 <- data$xseeds.removed
data$wrel2 <- data$W2/mean(data$W2)
# Total fitness: number of fruits pecked x mean number of seeds removed
data$W3 <- data$fruits.removed*data$xseeds.removed
data$wrel3 <- data$W3/mean(data$W3)
data$x1 <- data$fruit.crop
data$x2 <- data$xdiam
data$x3 <- data$xseedn
data$z1 <- (data$x1 - mean(data$x1))/sd(data$x1)
data$z2 <- (data$x2 - mean(data$x2))/sd(data$x2)
data$z3 <- (data$x3 - mean(data$x3))/sd(data$x3)
total.fitness.model <- lm(log(W3 + 1) ~ log(W1 + 1) + log(W2 + 1), data = data)
total.fitness.model <- lm(log(W3 + 1) ~ log(W1 + 1) + log(W2 + 1), data = data)
calc.relimp(total.fitness.model, b = 1000, type = "lmg")@lmg
calc.relimp(total.fitness.model, b = 1000, type = "lmg")@lmr2 <- calc.relimp(total.fitness.model, b = 1000, type = "lmg")@lmg g
r2 <- calc.relimp(total.fitness.model, b = 1000, type = "lmg")@lmg
names(r2) <- c("Fruit_removal", "Seed_removal")
r2 %>%  knitr::kable(., round = 3)
data %>% dplyr::select(z1, z2, z3) %>% cor() %>%
knitr::kable(.)
data %>% dplyr::select(z1, z2, z3) %>% cor() %>% round(., 2) %>%
knitr::kable(.)
data %>% dplyr::select(z1, z2, z3) %>% cor() %>%
knitr::kable(., round = 2)
data %>% dplyr::select(z1, z2, z3) %>% cor() %>%
knitr::kable(., digits = 2)
setwd("C:/Users/54221/Dropbox/GitHub/Passiflora_fitness")
data <- read.table("../data/Passiflora_fruits.txt", head = TRUE)
getwd()
# Trait histograms
ggplot(data = data, aes(x = z1)) + xlim(-2, 4) +
geom_histogram(aes(y = ..density..), col = "black", fill = "gray", binwidth = 0.5, alpha = 0.5) +
geom_density(col = "red", fill = "red", alpha = 0.3) + theme_classic()
ggplot(data = data, aes(x = z2)) + xlim(-4, 4) +
geom_histogram(aes(y = ..density..), col = "black", fill = "gray", binwidth = 0.5, alpha = 0.5) +
geom_density(col = "red", fill = "red", alpha = 0.3) + theme_classic()
